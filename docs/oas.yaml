#Open API Specification

openapi: 3.0.0
info:
  title: REST challenge API
  description: REST API for the RAVN REST challenge
  version: 0.0.1
# servers:
  # - url: http://api.example.com/v1
  #   description: Optional server description, e.g. Main (production) server
  # - url: http://staging-api.example.com
  #   description: Optional server description, e.g. Internal staging server for testing

# components
components:

  schemas:
    # Data:
    #   type: object
    #   required:
    #   - data

    RequestComment:
      type: object
      required:
      - content
      - is_published
      - post_id
      properties:
        content:
          type: string
        is_published:
          type: boolean
        post_id:
          type: integer
          example: 123

    RequestReportPost:
      type: object
      required:
      - content
      - is_published
      - post_id
      properties:
        content:
          type: string
        is_published:
          type: boolean
        post_id:
          type: integer
          example: 123

    RequestReportComment:
      type: object
      required:
      - content
      - is_published
      - post_id
      properties:
        content:
          type: string
        is_published:
          type: boolean
        comment_id:
          type: integer
          example: 123

    ResponseId:
      type: object
      description: 'Returns id '
      required:
      - id
      properties:
        id:
          type: number

    ResponsePost:
      type : object
      required:
      - title
      - content
      - username
      properties:
        title:
          type: string
        content:
          type: string
        username:
          type: string
        updated_at:
          type: string

    ResponseAccount:
      type : object
      required:
      - id
      - username
      - email_verified_at
      - role
      properties:
        id:
          type: string
        user:
          type: string
        email_verified_at:
          type: string
        role:
          type: string

    ResponseUpdatePost:
      type : object
      required:
      - title
      - content
      - is_published
      - updated_at
      properties:
        title:
          type: string
        content:
          type: string
        is_published:
          type: boolean
        updated_at:
          type: string

    ErrorNotLogedIn:
      type: object
      description: Error Not logged in
      required:
      - title
      - message
      - status
      properties:
        title:
          default: Error
        message:
          default: "You are not authorized to create a post, please login"
        status:
          default: 403

    ErrorInvalidId:
      type: object
      description: Error Invalid Id
      required:
      - title
      - message
      - status
      properties:
        title:
          default: Error
        message:
          default: "The id is invalid"
        status:
          default: 400

    ErrorNotAuthorized:
      type: object
      description: Error Not Authorized
      required:
      - title
      - message
      - status
      properties:
        title:
          default: Error
        message:
          default: "You are not authorized"
        status:
          default: 403

    ErrorNotFound:
      type: object
      description: Error Resource not found
      required:
      - title
      - message
      - status
      properties:
        title:
          default: Error
        message:
          default: "The Resource id not found"
        status:
          default: 404

paths:
# /login
  /login:
    post:
      tags:
        - "Auth"
      summary: Log in
      requestBody:
          description: User credentials
          required: true
          content:
            application/json:
              schema:
                required:
                - username
                - password
                properties:
                  username:
                    type: string
                    example: 'ragnar'
                  password:
                    type: string
                    example: 'password123'
      responses:
        "200":
          description: "You are succesful logged in"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    description: Return token
                    required:
                    - user_id
                    - token
                    properties:
                      user_id:
                        type: number
                      token:
                        type: string
        "403":
          description: "Your username or password are incorrect"
          content:
            application/json:
              schema:
                type: object
                description: username or password are incorrect
                required:
                - title
                - message
                - status
                properties:
                  title:
                    default: Error
                  message:
                    default: "username or password are incorrect"
                  status:
                    default: 403
# /logout
  /logout:
    delete:
      tags:
          - "Auth"
      summary: Log out
      responses:
        "200":
          description: "You are logged out"
          content: {}
        "403":
          description: "You are not logged in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'

# /emailconfirm
  /emailconfirm:
    post:
      tags:
        - "Auth"
      summary: Email confirmation
      requestBody:
          description: User credentials and token email
          required: true
          content:
            application/json:
              schema:
                required:
                - username
                - token
                properties:
                  username:
                    type: string
                    example: 'ragnar'
                  token:
                    type: string
                    example: 'ABCD'
      responses:
        "200":
          description: "Email confirmation succesful"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    description: Return username and email verified
                    required:
                    - username
                    - email
                    properties:
                      username:
                        type: string
                      email:
                        type: string
        "404":
          description: "Username not found"
          content:
            application/json:
              schema:
                type: object
                description: Username not found
                required:
                - title
                - message
                - status
                properties:
                  title:
                    default: Error
                  message:
                    default: "username not found"
                  status:
                    default: 404

# signup
  /signup:
    post:
      tags:
          - "Account"
      summary: Create account
      requestBody:
          description: User data and credentials
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                - username
                - password
                - email
                properties:
                  username:
                    type: string
                    example: 'ragnar'
                  password:
                    type: string
                    example: 'password123'
                  email:
                    type: string
                    example: 'ragnar@ravn.co'
                  name:
                    type: string
                    example: 'Odin'
                  is_name_public:
                    type: boolean
                    default: true
                  is_email_public:
                    type: boolean
                    default: true
      responses:
        "201":
          description: "Succesful registration"
          content:
            application/json:
              schema:
                type: object
                description: Return Registration data
                required:
                - data
                properties:
                  data:
                    type: object
                    description: Return token
                    required:
                    - user_id
                    - username
                    - password
                    - email
                    properties:
                      username:
                        type: string
                        example: 'ragnar'
                      password:
                        type: string
                        example: 'password123'
                      email:
                        type: string
                        example: 'ragnar@ravn.co'
                      name:
                        type: string
                        example: 'Odin'
                      is_name_public:
                        type: boolean
                        default: true
                      is_email_public:
                        type: boolean
                        default: true
        "403":
          description: "Your data are incorrect"
          content:
            application/json:
              schema:
                type: object
                description: Incorrect data
                required:
                - title
                - message
                - status
                properties:
                  title:
                    default: Error
                  message:
                    default: "data are incorrect"
                  status:
                    default: 403
        "500":
          description: "Server Error"

# /accounts
  /accounts:
    get:
      tags:
        - "Account"
      summary: Returns a list of accounts
      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    description: Array of posts
                    items:
                      $ref: '#/components/schemas/ResponseAccount'
        "403":
          description: "You are not authorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'

  /accounts/{accountid}:
    get:
      tags:
        - "Account"
      summary: Returns a single account info

      parameters:
      - in: path
        name: accountid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    description: Account info
                    $ref: '#/components/schemas/ResponseAccount'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    put:
      tags:
        - "Account"
      summary: Update an existing account

      parameters:
      - in: path
        name: accountid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
          description: User data and credentials
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                - username
                - password
                properties:
                  username:
                    type: string
                    example: 'ragnar'
                  password:
                    type: string
                    example: 'password123'
                  email:
                    type: string
                    example: 'ragnar@ravn.co'
                  name:
                    type: string
                    example: 'Odin'
                  is_name_public:
                    type: boolean
                    default: true
                  is_email_public:
                    type: boolean
                    default: true

      responses:
        "200":
          description: "succesful update"
          content:
            application/json:
                schema:
                  type: object
                  required:
                  - data
                  properties:
                    data:
                      type: object
                      description: Account info
                      $ref: '#/components/schemas/ResponseAccount'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to update this account"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Account"
      summary: Delete an existing account

      parameters:
      - in: path
        name: accountid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful delete"
          content:
            application/json:
                schema:
                  type: object
                  required:
                  - data
                  properties:
                    data:
                      type: object
                      description: Account info
                      $ref: '#/components/schemas/ResponseAccount'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to delete this account"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  # accounts/me/posts
  /accounts/me/posts:
    get:
      tags:
        - "Post"
      summary: Returns a list of posts of user logged

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    description: Array of posts
                    items:
                      $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

    post:
      tags:
        - "Post"
      summary: Create post
      requestBody:
        description: Post object to be created
        required: true
        content:
          application/json:
            schema:
              required:
              - title
              - content
              - is_published
              properties:
                title:
                  type: string
                  example: 'Nuevo Post'
                content:
                  type: string
                  example: 'Nuevo Contenido'
                is_published:
                  type: boolean
                  example: true
      responses:
        "201":
          description: "post created"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    required:
                    - id
                    - title
                    - content
                    - is_published
                    properties:
                      id:
                        type: number
                        example: 123
                      title:
                        type: string
                        example: 'Nuevo Post'
                      content:
                        type: string
                        example: 'Nuevo Contenido'
                      is_published:
                        type: boolean
                        example: true

  /accounts/me/posts/{postid}:
    get:
      tags:
        - "Post"
      summary: Returns a specific post of user logged

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    put:
      tags:
        - "Post"
      summary: Update an existing post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        description: Post object to be created
        required: true
        content:
          application/json:
            schema:
              required:
              - title
              - content
              - is_published
              properties:
                title:
                  type: string
                  example: 'Nuevo Post'
                content:
                  type: string
                  example: 'Nuevo Contenido'
                is_published:
                  type: boolean
                  example: true

      responses:
        "200":
          description: "succesful update"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                   $ref: '#/components/schemas/ResponseUpdatePost'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to update this post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Post"
      summary: Delete an existing post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true

      responses:
        "200":
          description: "succesful delete"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/ResponsePost'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to delete this post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'


  /accounts/me/posts/{postid}/comments:
    get:
      tags:
        - "Comment"
      summary: Returns all published comments of a specific posts of me

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    description: Array of posts
                    items:
                      $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

    post:
      tags:
        - "Comment"
      summary: Create a comment or draft

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        description: comment send from client
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestComment'
          text/plain:
            schema:
              type: string

      responses:
        '200':
          description: 'succesful operation'
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/RequestComment'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        '404':
          description: 'post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'


  # manage account
  /accounts/{accountid}/posts:
    get:
      tags:
        - "Post"
      summary: Returns published all posts of a user

      parameters:
      - in: path
        name: accountid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    description: Array of posts
                    items:
                      $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  /accounts/{accountid}/posts/{postid}:
    get:
      tags:
        - "Post"
      summary: Returns published specific posts of a user

      parameters:
      - in: path
        name: accountid
        schema:
          type: integer
        required: true
        description: Numeric ID
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  /accounts/{accountid}/posts/{postid}/comments:
    get:
      tags:
        - "Comment"
      summary: Returns all published comments of a specific posts of a user

      parameters:
      - in: path
        name: accountid
        schema:
          type: integer
        required: true
        description: Numeric ID
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    description: Array of posts
                    items:
                      $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

    put:
      tags:
          - "Comment"
      summary: Update an existing comment

      parameters:
      - in: path
        name: commentid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestComment'

      responses:
        '200':
          description: 'succesful update'
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/RequestComment'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to update this comment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Comment"
      summary: Delete an existing comment

      parameters:
      - in: path
        name: commentid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        '200':
          description: 'succesful delete'
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/RequestComment'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to delete this comment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

# /posts
  /posts:
    get:
      tags:
        - "Post"
      summary: Returns a list of published posts
      parameters:
        - name: username
          description: an optional user name of an account
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: array
                    description: Array of posts
                    items:
                      $ref: '#/components/schemas/ResponsePost'
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

        "403":
          description: "You are not authorized to create a post, please login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'

  /posts/{postid}:
    get:
      tags:
        - "Post"
      summary: Returns a single post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/ResponsePost'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    # put:
    #   tags:
    #     - "Post"
    #   summary: Update an existing post

    #   parameters:
    #   - in: path
    #     name: postid
    #     schema:
    #       type: integer
    #     required: true
    #     description: Numeric ID

    #   requestBody:
    #     description: Post object to be created
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           required:
    #           - title
    #           - content
    #           - is_published
    #           properties:
    #             title:
    #               type: string
    #               example: 'Nuevo Post'
    #             content:
    #               type: string
    #               example: 'Nuevo Contenido'
    #             is_published:
    #               type: boolean
    #               example: true

    #   responses:
    #     "200":
    #       description: "succesful update"
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             required:
    #             - data
    #             properties:
    #               data:
    #                $ref: '#/components/schemas/ResponseUpdatePost'
    #     "400":
    #       description: "invalid id"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorInvalidId'
    #     "403":
    #       description: "You are not authorized to update this post"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotAuthorized'
    #     "404":
    #       description: "post not found"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Post"
      summary: Delete an existing post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true

      responses:
        "200":
          description: "succesful delete"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    $ref: '#/components/schemas/ResponsePost'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized to delete this post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
############
# Post Like
############
  /accounts/me/posts/{postid}/like:
    patch:
      tags:
        - "Likes"
      summary: Toggle between "like or dislike" to a post

      parameters:
      - in: path
        postId: postid
        schema:
          type: integer
        required: true
        description: Numeric ID


      responses:
        "200":
          description: "succesful operation"
          content: {}
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Likes"
      summary: Remove "like or dislike" to a post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content: {}
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
  /accounts/me/posts/{postid}/dislike:
    patch:
      tags:
        - "Likes"
      summary: Give "dislike" to a post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Likes"
      summary: Remove "dislike" to a post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  /accounts/me/posts/{postid}/report:
    post:
      tags:
        - "Reports"
      summary: Report a post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        description: comment send from client
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestReportPost'
          text/plain:
            schema:
              type: string

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/RequestReportPost'

        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Reports"
      summary: Remove report status to a post

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        "200":
          description: "succesful operation"
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/RequestReportPost'
        "400":
          description: "invalid id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        "404":
          description: "post not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  # comments
  # /comments/{postid}:
    # post:
    #   tags:
    #     - "Comment"
    #   summary: Create a comment or draft

    #   parameters:
    #   - in: path
    #     name: postid
    #     schema:
    #       type: integer
    #     required: true
    #     description: Numeric ID

    #   requestBody:
    #     description: comment send from client
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/RequestComment'
    #       text/plain:
    #         schema:
    #           type: string

    #   responses:
    #     '200':
    #       description: 'succesful operation'
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             required:
    #             - data
    #             properties:
    #               data:
    #                 $ref: '#/components/schemas/RequestComment'
    #     '400':
    #       description: 'invalid id'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorInvalidId'
    #     "403":
    #       description: "You are not authorized, please log in"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotLogedIn'
    #     '404':
    #       description: 'post not found'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotFound'

  # /comments/{commentid}:
    # put:
    #   tags:
    #       - "Comment"
    #   summary: Update an existing comment

    #   parameters:
    #   - in: path
    #     name: commentid
    #     schema:
    #       type: integer
    #     required: true
    #     description: Numeric ID

    #   requestBody:
    #     content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/RequestComment'

    #   responses:
    #     '200':
    #       description: 'succesful update'
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             required:
    #             - data
    #             properties:
    #               data:
    #                 $ref: '#/components/schemas/RequestComment'
    #     '400':
    #       description: 'invalid id'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorInvalidId'
    #     "403":
    #       description: "You are not authorized to update this comment"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotAuthorized'
    #     '404':
    #       description: 'comment not found'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotFound'
    # delete:
    #   tags:
    #     - "Comment"
    #   summary: Delete an existing comment

    #   parameters:
    #   - in: path
    #     name: commentid
    #     schema:
    #       type: integer
    #     required: true
    #     description: Numeric ID

    #   responses:
    #     '200':
    #       description: 'succesful delete'
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             required:
    #             - data
    #             properties:
    #               data:
    #                 $ref: '#/components/schemas/RequestComment'
    #     '400':
    #       description: 'invalid id'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorInvalidId'
    #     "403":
    #       description: "You are not authorized to delete this comment"
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotAuthorized'
    #     '404':
    #       description: 'comment not found'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorNotFound'

  # /comments/{postid}/like && /comments/{postid}/dislike
  /accounts/me/comments/{postid}/like:
    patch:
      tags:
        - "Likes"
      summary: Toggle between "like or dislike" to a comment

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        description: update dislike to like
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestComment'
          text/plain:
            schema:
              type: string

      responses:
        '200':
          description: 'succesful operation'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Likes"
      summary: Remove "like" to a comment

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        '200':
          description: 'succesful operation'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  /accounts/me/comments/{postid}/dislike:
    patch:
      tags:
        - "Likes"
      summary: Give "dislike" to a comment

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        description: update like to dislike
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestComment'
          text/plain:
            schema:
              type: string

      responses:
        '200':
          description: 'succesful operation'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Likes"
      summary: Remove "dislike" to a comment

      parameters:
      - in: path
        name: postid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        '200':
          description: 'succesful operation'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotAuthorized'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  /accounts/me/comments/{commentid}/report:
    post:
      tags:
        - "Reports"
      summary: Report a comment

      parameters:
      - in: path
        name: commentid
        schema:
          type: integer
        required: true
        description: Numeric ID

      requestBody:
        description: comment send from client
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestReportComment'
          text/plain:
            schema:
              type: string

      responses:
        '200':
          description: 'succesful operation'
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/RequestReportComment'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
    delete:
      tags:
        - "Reports"
      summary: Delete a comment

      parameters:
      - in: path
        name: commentid
        schema:
          type: integer
        required: true
        description: Numeric ID

      responses:
        '200':
          description: 'succesful operation'
          content:
            application/json:
              schema:
                type: object
                required:
                - data
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/RequestReportComment'
        '400':
          description: 'invalid id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidId'
        "403":
          description: "You are not authorized, please log in"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogedIn'
        '404':
          description: 'comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'






