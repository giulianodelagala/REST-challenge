// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id        Int             @id @default(autoincrement())
  username  String          @db.VarChar(50)
  name      String          @db.VarChar(100)
  password  String          @db.VarChar(255)
  email     String          @db.VarChar(50) @unique
  emailVerifiedAt DateTime? @map("email_verified_at")
  isNamePublic    Boolean   @default(true) @map("is_name_public")
  isEmailPublic   Boolean   @default(true) @map("is_email_public")
  role      Role            @default(USER)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  posts           Posts[]
  comments        Comments[]
  reports         Reports[]
  likes           LikePost[]
}

model Posts {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  content     String
  isPublished Boolean     @default(false) @map("is_published")
  likeCounter     Int       @map("like_counter")
  dislikeCounter  Int       @map("dislike_counter")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user         Users      @relation(fields: [userId], references: [id])
  userId      Int         @map("user_id")
  comments     Comments[]
}

model Comments {
  id            Int         @id @default(autoincrement())
  content       String
  isPublished  Boolean      @default(false) @map("is_published")
  likeCounter     Int       @map("like_counter")
  dislikeCounter  Int       @map("dislike_counter")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  user          Users       @relation(fields: [userId], references: [id])
  userId       Int          @map("user_id")
  post          Posts       @relation(fields: [postId], references: [id])
  postId       Int          @map("post_id")

}

model Reports {
  id        Int         @id @default(autoincrement())
  content   String
  postOrCommentId Int   @map("post_comment_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        Users     @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
}

model LikePost {
  id            Int       @id @default(autoincrement())
  isLike        Boolean    @map("is_like")
  createdAt     DateTime   @default(now())  @map("created_at")
  user          Users     @relation(fields: [userId], references: [id])
  userId        Int        @map("user_id")
  postCommentId Int             @map("post_comment_id")
  type          PublishingType
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum PublishingType {
  POST
  COMMENT
}